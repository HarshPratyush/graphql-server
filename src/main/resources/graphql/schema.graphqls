schema {
    query: Query
    mutation: Mutation
}

type Query{
 allBank: [BankDetails],
 bank(accountNumber: String): BankDetails,
 allBranches: [BranchDetails],
 allClients:[UserDetails]
}


type BankDetails{
    id: Int,
    accountNumber: String,
    branchCode: String,
    branchDetails:BranchDetails,
    user: UserDetails,
    balance: BigDecimal,
    accountStatus:AccountStatus,
    createdBy: String,
    createdOn:LocalDateTime,
    lastModifiedBy: String,
    lastModifiedOn: LocalDateTime
}

type BranchDetails{
    id: Int,
    branchCode: String,
    city: String,
    country: String,
    street: String,
    zip: String,
    address: String,
    createdBy: String,
    createdOn:LocalDateTime,
    lastModifiedBy: String,
    lastModifiedOn: LocalDateTime
}

type UserDetails{
    id: Int,
    firstName: String,
    lastName: String,
    email: String,
    contact: String,
    city: String,
    country: String,
    street: String,
    zip: String,
    status: UserStatus,
    userType: UserType,
    createdBy: String,
    createdOn:LocalDateTime,
    lastModifiedBy: String,
    lastModifiedOn: LocalDateTime,
    timeZone: String,
    fullName:String,
    address: String

}

enum AccountStatus{
    ACTIVE,CLOSED,OPENED
}

enum UserType{
    USER,
    ADMIN,
    BANKER
}

enum UserStatus{
    ACTIVE,EXPIRED
}

scalar LocalDateTime
scalar BigDecimal

type Mutation{
createUser(userModel:UserModel):UserDetails

createBanker(userModel:UserModel):UserDetails

createBranch(branchDetails:BranchDetailsModel):BranchDetails

createBankAccount(bankDetailModel:BankDetailsModel):BankDetails

login(email: String!, password: String!): Token
}

type Token{
    bearerToken:String!,
    expiresOn:LocalDateTime!,
    userType: UserType
}

input UserModel{
    firstName: String!,
    lastName: String!,
    email: String!,
    contact: String!,
    password:String!,
    status: UserStatus!,
    city: String!,
    country: String!,
    street: String!,
    zip: String!,
    timeZone: String!
}

input BankDetailsModel{
    accountNumber:String!,
    branchCode:String!,
        userId:Int!
}

input BranchDetailsModel{
    branchCode:String!,
    city: String!,
    country: String!,
    street: String!,
    zip: String!
}
