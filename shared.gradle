/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group 'org.oaknorth.graphql'

buildscript {

    repositories {
        jcenter()
        mavenCentral(url: "https://plugins.gradle.org/m2/")
    }

    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE'
//        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0'
    }
}
ext.versions = [

]
ext.submodule = [
        api    : '0.0.1-BUILD-SNAPSHOT',
        service: '0.0.1-BUILD-SNAPSHOT',
]

apply plugin: 'java'
apply plugin: 'idea'
//apply plugin: 'base'
apply plugin: 'maven-publish'
//apply plugin: 'checkstyle'
//apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'io.spring.dependency-management'
//apply plugin: 'license'
version submodule.service


tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenLocal()
    mavenCentral(url: "https://plugins.gradle.org/m2/")
}

configurations {
    compile.exclude group: 'commons-logging', module: 'commons-logging'
}
ext {
    set('springCloudVersion', "Greenwich.RELEASE")
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }

}

configurations.all {
    resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.0'
}


dependencies {
    compile(
            [group: 'com.google.code.findbugs', name: 'jsr305'],
            [group: 'io.netty', name: 'netty-all', version: '4.1.36.Final'],
            [group: 'io.netty', name: 'netty-transport-rxtx', version: '4.1.36.Final'],
            [group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'],

            [group: 'org.bidib.jbidib', name: 'jbidibc-rxtx-2.2', version: '1.6.0'],
            [group: 'org.bidib.jbidib', name: 'bidib-rxtx-binaries', version: '2.2'],

    )

}

jar {
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
//
//license {
//    header rootProject.file('../HEADER')
//    strictCheck true
//    mapping {
//        java = 'SLASHSTAR_STYLE'
//        xml = 'XML_STYLE'
//        yml = 'SCRIPT_STYLE'
//        yaml = 'SCRIPT_STYLE'
//    }
//    excludes(["**/*.txt", "**/*.conf", "**/*.properties", "**/*.json"])
//
//}


//checkstyle {
//    toolVersion = '8.23'
//    ignoreFailures = false
//
//    configFile = file("../code-analysis/checkstyle/gcheckstyle.xml")
//}
//
//pmd {
//    toolVersion = '6.0.0'
//    ignoreFailures = false
//    ruleSetFiles = files("../code-analysis/pmd/ruleset.xml")
//    //ruleSets = []
//    //rulePriority = 3
//}

jacoco {
    //toolVersion = "0.8.4"
    //reportsDir = file("$project.buildDir/reports/coverage/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }
}

test {
    finalizedBy jacocoTestReport
}
